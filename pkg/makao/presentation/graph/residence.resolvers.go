package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/oryx-systems/makao/pkg/makao/application/dto"
	"github.com/oryx-systems/makao/pkg/makao/domain"
)

// CreateResidence is the resolver for the createResidence field.
func (r *mutationResolver) CreateResidence(ctx context.Context, input dto.ResidenceInput) (*domain.Residence, error) {
	r.checkPreconditions()

	return r.makao.Residence.CreateResidence(ctx, input)
}

// AddUserToResidence is the resolver for the addUserToResidence field.
func (r *mutationResolver) AddUserToResidence(ctx context.Context, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: AddUserToResidence - addUserToResidence"))
}

// UpdateResidence is the resolver for the updateResidence field.
func (r *mutationResolver) UpdateResidence(ctx context.Context, id string, name *string, livingRoomsCount *int, owner *string) (bool, error) {
	panic(fmt.Errorf("not implemented: UpdateResidence - updateResidence"))
}

// FreezeResidence is the resolver for the freezeResidence field.
func (r *mutationResolver) FreezeResidence(ctx context.Context, residenceID string) (bool, error) {
	panic(fmt.Errorf("not implemented: FreezeResidence - freezeResidence"))
}

// UnfreezeResidence is the resolver for the unfreezeResidence field.
func (r *mutationResolver) UnfreezeResidence(ctx context.Context, residenceID string) (bool, error) {
	panic(fmt.Errorf("not implemented: UnfreezeResidence - unfreezeResidence"))
}

// ListResidenceTenants is the resolver for the listResidenceTenants field.
func (r *queryResolver) ListResidenceTenants(ctx context.Context) ([]*domain.User, error) {
	panic(fmt.Errorf("not implemented: ListResidenceTenants - listResidenceTenants"))
}
